// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザーテーブル
model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password_hash  String
  name           String    @db.VarChar(100)
  credits        Int       @default(0)
  email_verified Boolean   @default(false)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  // Relations
  fortune_requests    FortuneRequest[]
  credit_transactions CreditTransaction[]
  payment_history     PaymentHistory[]
  audit_logs          AuditLog[]

  @@map("users")
}

// 管理者テーブル
model Admin {
  id            String    @id @default(uuid())
  email         String    @unique
  password_hash String
  name          String    @db.VarChar(100)
  role          String    @db.VarChar(20) // super_admin, admin
  permissions   Json?     // 権限配列をJSONで格納 ["fortune:review", "fortune:approve", etc.]
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  edited_results  AiResult[]      @relation("EditedBy")
  approved_results FortuneResult[] @relation("ApprovedBy") 
  credit_adjustments CreditTransaction[]
  audit_logs      AuditLog[]

  @@map("admins")
}

// 占い種別マスタ
model FortuneType {
  id               String    @id @default(uuid())
  name             String    @unique @db.VarChar(50)
  description      String?
  required_credits Int
  input_schema     Json
  is_active        Boolean   @default(true)
  created_at       DateTime  @default(now())

  // Relations
  fortune_requests FortuneRequest[]

  @@map("fortune_types")
}

// 占い申込
model FortuneRequest {
  id              String    @id @default(uuid())
  user_id         String
  fortune_type_id String
  input_data      Json
  status          String    @default("pending") @db.VarChar(20)
  created_at      DateTime  @default(now())

  // Relations
  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  fortune_type  FortuneType   @relation(fields: [fortune_type_id], references: [id])
  ai_result     AiResult?
  fortune_result FortuneResult?

  @@index([user_id])
  @@index([fortune_type_id])
  @@index([status])
  @@index([created_at(sort: Desc)])
  @@index([user_id, status])
  @@map("fortune_requests")
}

// AI生成結果
model AiResult {
  id                String    @id @default(uuid())
  fortune_request_id String   @unique
  raw_result        String    @db.Text
  edited_result     String?   @db.Text
  editor_notes      String?   @db.Text
  edited_by         String?
  edited_at         DateTime?
  approved_by       String?
  approved_at       DateTime?
  status            String    @default("pending_review") @db.VarChar(20) // pending_review, editing, approved
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  // Relations
  fortune_request FortuneRequest @relation(fields: [fortune_request_id], references: [id], onDelete: Cascade)
  editor          Admin?         @relation("EditedBy", fields: [edited_by], references: [id], onDelete: SetNull)

  @@index([status])
  @@index([edited_by])
  @@index([approved_at])
  @@index([created_at(sort: Desc)])
  @@map("ai_results")
}

// 最終鑑定結果
model FortuneResult {
  id                String   @id @default(uuid())
  fortune_request_id String  @unique
  final_result      String   @db.Text
  approver_notes    String?  @db.Text
  approved_by       String
  approved_at       DateTime @default(now())
  pdf_url           String?  @db.VarChar(500)
  created_at        DateTime @default(now())

  // Relations
  fortune_request FortuneRequest @relation(fields: [fortune_request_id], references: [id], onDelete: Cascade)
  approver        Admin          @relation("ApprovedBy", fields: [approved_by], references: [id], onDelete: Restrict)

  @@index([approved_at(sort: Desc)])
  @@index([approved_by])
  @@map("fortune_results")
}

// クレジット取引
model CreditTransaction {
  id          String   @id @default(uuid())
  user_id     String
  amount      Int      // 正: 追加, 負: 使用
  type        String   @db.VarChar(20) // purchase, usage, bonus, refund, admin_grant, admin_deduct
  description String?  @db.VarChar(255)
  admin_id    String?  // 管理者による調整の場合
  created_at  DateTime @default(now())

  // Relations
  user  User   @relation(fields: [user_id], references: [id], onDelete: SetNull)
  admin Admin? @relation(fields: [admin_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([type])
  @@index([admin_id])
  @@index([created_at(sort: Desc)])
  @@index([user_id, created_at(sort: Desc)])
  @@map("credit_transactions")
}

// 決済履歴
model PaymentHistory {
  id                String   @id @default(uuid())
  user_id           String
  stripe_payment_id String   @unique @db.VarChar(255)
  amount_jpy        Int
  credits_purchased Int
  status            String   @db.VarChar(20) // succeeded, failed, refunded
  created_at        DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([user_id])
  @@index([status])
  @@index([created_at(sort: Desc)])
  @@map("payment_history")
}

// 監査ログ
model AuditLog {
  id         String   @id @default(uuid())
  table_name String   @db.VarChar(50)
  action     String   @db.VarChar(20) // INSERT, UPDATE, DELETE, LOGIN, LOGOUT
  user_id    String?
  admin_id   String?
  changes    Json?
  ip_address String?  @db.VarChar(45)
  created_at DateTime @default(now())

  // Relations
  user  User?  @relation(fields: [user_id], references: [id], onDelete: SetNull)
  admin Admin? @relation(fields: [admin_id], references: [id], onDelete: SetNull)

  @@index([table_name])
  @@index([action])
  @@index([user_id])
  @@index([admin_id])
  @@index([created_at(sort: Desc)])
  @@map("audit_logs")
}